#TITLE	Coupling Validity Study
#SUMMARY	Measurements for the metrics used in the Coupling Validity Study: Paul Ralph and Ewan Tempero Construct Validity in Software Engineering Research and Software Metrics 22nd International Conference on Evaluation and Assessment in Software Engineering (EASE) 2018. https://doi.org/10.1145/3210459.3210461

##Dataset attributes
Timestamp	Sun May 16 20:47:46 NZST 2021
Tool	mete-analysis(coupling validity):20200425
System	a3-modular-kalah-OverCry
Codebase	submissions/a3-modular-kalah-OverCry/a3-modular-kalah-OverCry

##Measurements
#Metadata
Kind	Nominal	What 'kind' of module (Class, Interface, Enum, Annotation, Exception)
FAN-out (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
FAN-in (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanin) Record only dependencies from target to source (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
FAN-bidir (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (bidir) Dependencies are recorded as bi-directional. If A has a dependency to B, then B has a dependency to A; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
FAN-out-occr (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (occr) Record each occurrence of a dependency separately; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
CBO (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (bidir) Dependencies are recorded as bi-directional. If A has a dependency to B, then B has a dependency to A; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
CBO-out (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
MPC (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (pres) Record only the presence (or not) of an occurrence of a dependency between entities
ICP (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen
LCOM1 (Cohesion)	UnboundedCount	(srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM1-inst (Cohesion)	UnboundedCount	(srcinst) Only record dependencies with respect to instance fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM2 (Cohesion)	UnboundedCount	(srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM2-inst (Cohesion)	UnboundedCount	(srcinst) Only record dependencies with respect to instance fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM4 (Cohesion)	UnboundedCount	(Can't provide easy evidence for number of connected components) (srcinst) Only record dependencies with respect to instance fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
NumMeth (Size)	UnboundedCount	(srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (raw) Do not record dependencies due to synthetic constructs; (srcmem) Include dependencies to members of all visibilities in source
NumFlds(Size)	UnboundedCount	(trgtall) Record dependencies to target modules whether or not the declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (type) Record dependencies between all types, including interfaces, enums, an annotations; (occr) Record each occurrence of a dependency separately; (prim) Include dependencies to primitive types; (same) Include dependencies to the same type
#Data
#Entity	Kind	Evidence	FAN-out (Coupling)	Evidence	FAN-in (Coupling)	Evidence	FAN-bidir (Coupling)	Evidence	FAN-out-occr (Coupling)	Evidence	CBO (Coupling)	Evidence	CBO-out (Coupling)	Evidence	MPC (Coupling)	Evidence	ICP (Coupling)	Evidence	LCOM1 (Cohesion)	Evidence	LCOM1-inst (Cohesion)	Evidence	LCOM2 (Cohesion)	Evidence	LCOM2-inst (Cohesion)	Evidence	LCOM4 (Cohesion)	Evidence	NumMeth (Size)	Evidence	NumFlds(Size)	Evidence
Main	Class	(not needed)	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	2	[Return:Main#public static void main(java.lang.String[]) {}, Main#public <init>() {}>junit.framework.TestCase#<init>() <>*:[1]]	0	[]
kalah.Board	Class	(not needed)	5	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.Singleton.Printer, kalah.Team, kalah.Interface.IBoard]	1	[kalah.Kalah]	6	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.Singleton.Printer, kalah.Team, kalah.Kalah, kalah.Interface.IBoard]	23	[Implements:kalah.Board>kalah.Interface.IBoard, kalah.Board#private boolean ifOver() {}>kalah.Interface.ITeam#public abstract java.util.List getStores() <>:[5], kalah.Board#public <init>(com.qualitascorpus.testsupport.IO) {}>kalah.Singleton.Printer#public static kalah.Singleton.Printer getInstance() {}:[5], kalah.Board#public <init>(com.qualitascorpus.testsupport.IO,int,int,int) {}>kalah.Singleton.Printer#public static kalah.Singleton.Printer getInstance() {}:[5], Cast:kalah.Interface.ITeam:[4], Local:kalah.Interface.ITeam:[0], kalah.Board#private void setUp() {}>kalah.Interface.ITeam#public abstract int getTeamNumber() <>:[14], Local:kalah.Interface.ITeam:[1], kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}:[36], Local:kalah.Interface.IStore:[0], Local:kalah.Interface.IStore:[1], kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[5], kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[31], Cast:kalah.Interface.IStore:[9], kalah.Board#private void setUp() {}>kalah.Interface.ITeam#public abstract void addNext(kalah.Interface.ITeam) <>:[18], kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[24], kalah.Board#private void doAction(int) {}>kalah.Interface.IStore#public abstract int takeAll() <>:[6], kalah.Board#private void setUp() {}>kalah.Team#public <init>(int,int,int,int) {}:[6], kalah.Board#private kalah.Singleton.Printer _printer, kalah.Board#private boolean ifOver() {}>kalah.Interface.IStore#public abstract int getAmount() <>:[10], Cast:kalah.Interface.ITeam:[17], kalah.Board#private void doAction(int) {}>kalah.Interface.ITeam#public abstract boolean moveAtMid(java.lang.Integer,int,int) <>:[11], kalah.Board#private void doAction(int) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>:[5]]	5	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.Singleton.Printer, kalah.Team, kalah.Kalah]	4	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.Singleton.Printer, kalah.Team]	18	[setUp()>kalah.Interface.ITeam#public abstract void addNext(kalah.Interface.ITeam) <>, ifOver()>kalah.Interface.IStore#public abstract int getAmount() <>, doAction(int)>kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>, doAction(int)>kalah.Interface.IStore#public abstract int takeAll() <>, doAction(int)>kalah.Interface.ITeam#public abstract boolean moveAtMid(java.lang.Integer,int,int) <>, doAction(int)>kalah.Store#public int takeAll() {}, <init>(com.qualitascorpus.testsupport.IO,int,int,int)>kalah.Singleton.Printer#public static kalah.Singleton.Printer getInstance() {}, setUp()>kalah.Team#public <init>(int,int,int,int) {}, play()>kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}, setUp()>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, <init>(com.qualitascorpus.testsupport.IO)>kalah.Singleton.Printer#public static kalah.Singleton.Printer getInstance() {}, ifOver()>kalah.Interface.ITeam#public abstract java.util.List getStores() <>, doAction(int)>kalah.Team#public kalah.Interface.IStore getStore(int) {}, setUp()>kalah.Team#public int getTeamNumber() {}, doAction(int)>kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}, setUp()>kalah.Interface.ITeam#public abstract int getTeamNumber() <>, ifOver()>kalah.Team#public java.util.List getStores() {}, play()>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}]	38	[kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[24][0]com.qualitascorpus.testsupport.IO, kalah.Board#private void setUp() {}>kalah.Interface.ITeam#public abstract int getTeamNumber() <>:[14], kalah.Board#private void doAction(int) {}>kalah.Interface.ITeam#public abstract boolean moveAtMid(java.lang.Integer,int,int) <>:[11][1]int, kalah.Board#private void doAction(int) {}>kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}:[11][1]int, kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[31][1]java.util.List, kalah.Board#private void doAction(int) {}>kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}:[11][2]int, kalah.Board#private void doAction(int) {}>kalah.Store#public int takeAll() {}:[6], kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}:[36], kalah.Board#private void doAction(int) {}>kalah.Team#public kalah.Interface.IStore getStore(int) {}:[5], kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[24][1]java.util.List, kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[5], kalah.Board#private boolean ifOver() {}>kalah.Team#public java.util.List getStores() {}:[5], kalah.Board#private void doAction(int) {}>kalah.Interface.ITeam#public abstract boolean moveAtMid(java.lang.Integer,int,int) <>:[11][0]java.lang.Integer, kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[24], kalah.Board#private void doAction(int) {}>kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}:[11], kalah.Board#private void doAction(int) {}>kalah.Team#public kalah.Interface.IStore getStore(int) {}:[5][0]int, kalah.Board#private boolean ifOver() {}>kalah.Interface.IStore#public abstract int getAmount() <>:[10], kalah.Board#private void setUp() {}>kalah.Team#public void addNext(kalah.Interface.ITeam) {}:[18][0]kalah.Interface.ITeam, kalah.Board#private void doAction(int) {}>kalah.Interface.ITeam#public abstract boolean moveAtMid(java.lang.Integer,int,int) <>:[11], kalah.Board#private void doAction(int) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>:[5], kalah.Board#private boolean ifOver() {}>kalah.Interface.ITeam#public abstract java.util.List getStores() <>:[5], kalah.Board#private void doAction(int) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>:[5][0]int, kalah.Board#private void setUp() {}>kalah.Team#public void addNext(kalah.Interface.ITeam) {}:[18], kalah.Board#private void doAction(int) {}>kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}:[11][0]java.lang.Integer, kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[5][0]com.qualitascorpus.testsupport.IO, kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[31][0]com.qualitascorpus.testsupport.IO, kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[5][2]int, kalah.Board#private void setUp() {}>kalah.Team#public int getTeamNumber() {}:[14], kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[5][1]java.util.List, kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}:[36][1]java.util.List, kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[31], kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[24][2]int, kalah.Board#private void setUp() {}>kalah.Interface.ITeam#public abstract void addNext(kalah.Interface.ITeam) <>:[18], kalah.Board#private void doAction(int) {}>kalah.Interface.ITeam#public abstract boolean moveAtMid(java.lang.Integer,int,int) <>:[11][2]int, kalah.Board#private void setUp() {}>kalah.Interface.ITeam#public abstract void addNext(kalah.Interface.ITeam) <>:[18][0]kalah.Interface.ITeam, kalah.Board#private void doAction(int) {}>kalah.Interface.IStore#public abstract int takeAll() <>:[6], kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}:[36][0]com.qualitascorpus.testsupport.IO, kalah.Board#public void play() {}>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}:[31][2]int]	0	[]	0	[]	0	[]	0	[]	1	[kalah.Board#public void play() {}]	7	[Return:kalah.Board#private boolean ifOver() {}, Return:kalah.Board#public void reset() {}, Return:kalah.Board#private void doAction(int) {}, kalah.Board#public <init>(com.qualitascorpus.testsupport.IO) {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.Board#private void setUp() {}, Return:kalah.Board#public void play() {}, kalah.Board#public <init>(com.qualitascorpus.testsupport.IO,int,int,int) {}>java.lang.Object#public <init>() <>*:[1]]	7	[kalah.Board#private int _turn, kalah.Board#private int _startingSeeds, kalah.Board#private java.util.List _teams, kalah.Board#private com.qualitascorpus.testsupport.IO _io, kalah.Board#private kalah.Singleton.Printer _printer, kalah.Board#private int _stalls, kalah.Board#private int _players]
kalah.House	Class	(not needed)	2	[kalah.Storage, kalah.Interface.IHouse]	1	[kalah.Team]	3	[kalah.Storage, kalah.Interface.IHouse, kalah.Team]	4	[Put:kalah.House#public <init>() {}>kalah.Storage#default int _amount:[2], kalah.House#public <init>() {}>kalah.Storage#public <init>() {}:[1], Implements:kalah.House>kalah.Interface.IHouse, Extends:kalah.House>kalah.Storage]	2	[kalah.Storage, kalah.Team]	1	[kalah.Storage]	1	[<init>()>kalah.Storage#public <init>() {}]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	1	[kalah.House#public <init>() {}>kalah.Storage#public <init>() {}:[1]]	0	[]
kalah.Interface.IBoard	Interface	(not needed)	0	[]	2	[kalah.Board, kalah.Kalah]	2	[kalah.Board, kalah.Kalah]	0	[]	1	[kalah.Kalah]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	2	[kalah.Interface.IBoard#public abstract void play() <>, kalah.Interface.IBoard#public abstract void reset() <>]	2	[Return:kalah.Interface.IBoard#public abstract void play() <>, Return:kalah.Interface.IBoard#public abstract void reset() <>]	0	[]
kalah.Interface.IHouse	Interface	(not needed)	0	[]	4	[kalah.Interface.ITeam, kalah.House, kalah.Singleton.Printer, kalah.Team]	4	[kalah.Interface.ITeam, kalah.House, kalah.Singleton.Printer, kalah.Team]	0	[]	2	[kalah.Singleton.Printer, kalah.Team]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	2	[kalah.Interface.IHouse#public abstract int getAmount() <>, kalah.Interface.IHouse#public abstract void addAmount(int) <>]	2	[Return:kalah.Interface.IHouse#public abstract int getAmount() <>, Return:kalah.Interface.IHouse#public abstract void addAmount(int) <>]	0	[]
kalah.Interface.IStore	Interface	(not needed)	0	[]	5	[kalah.Interface.ITeam, kalah.Singleton.Printer, kalah.Store, kalah.Team, kalah.Board]	5	[kalah.Interface.ITeam, kalah.Singleton.Printer, kalah.Store, kalah.Team, kalah.Board]	0	[]	3	[kalah.Singleton.Printer, kalah.Team, kalah.Board]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	4	[kalah.Interface.IStore#public abstract void addAmount(int) <>, kalah.Interface.IStore#public abstract int takeAll() <>, kalah.Interface.IStore#public abstract int getNumber() <>, kalah.Interface.IStore#public abstract int getAmount() <>]	4	[Return:kalah.Interface.IStore#public abstract void addAmount(int) <>, Return:kalah.Interface.IStore#public abstract int getAmount() <>, Return:kalah.Interface.IStore#public abstract int getNumber() <>, Return:kalah.Interface.IStore#public abstract int takeAll() <>]	0	[]
kalah.Interface.ITeam	Interface	(not needed)	2	[kalah.Interface.IStore, kalah.Interface.IHouse]	3	[kalah.Singleton.Printer, kalah.Team, kalah.Board]	5	[kalah.Interface.IStore, kalah.Singleton.Printer, kalah.Interface.IHouse, kalah.Team, kalah.Board]	2	[Return:kalah.Interface.ITeam#public abstract kalah.Interface.IHouse getHouse() <>, Return:kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>]	3	[kalah.Singleton.Printer, kalah.Team, kalah.Board]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	8	[kalah.Interface.ITeam#public abstract kalah.Interface.IHouse getHouse() <>, kalah.Interface.ITeam#public abstract java.util.List getStores() <>, kalah.Interface.ITeam#public abstract void addNext(kalah.Interface.ITeam) <>, kalah.Interface.ITeam#public abstract boolean moveAtMid(java.lang.Integer,int,int) <>, kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>, kalah.Interface.ITeam#public abstract int getScore() <>, kalah.Interface.ITeam#public abstract int getTeamNumber() <>, kalah.Interface.ITeam#public abstract boolean move(int,int) <>]	8	[Return:kalah.Interface.ITeam#public abstract boolean moveAtMid(java.lang.Integer,int,int) <>, Return:kalah.Interface.ITeam#public abstract void addNext(kalah.Interface.ITeam) <>, Return:kalah.Interface.ITeam#public abstract int getScore() <>, Return:kalah.Interface.ITeam#public abstract boolean move(int,int) <>, Return:kalah.Interface.ITeam#public abstract kalah.Interface.IHouse getHouse() <>, Return:kalah.Interface.ITeam#public abstract int getTeamNumber() <>, Return:kalah.Interface.ITeam#public abstract java.util.List getStores() <>, Return:kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>]	0	[]
kalah.Kalah	Class	(not needed)	2	[kalah.Board, kalah.Interface.IBoard]	0	[]	2	[kalah.Board, kalah.Interface.IBoard]	3	[kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.Interface.IBoard#public abstract void play() <>:[2], Local:kalah.Interface.IBoard:[0], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.Board#public <init>(com.qualitascorpus.testsupport.IO) {}:[1]]	2	[kalah.Board, kalah.Interface.IBoard]	2	[kalah.Board, kalah.Interface.IBoard]	3	[play(com.qualitascorpus.testsupport.IO)>kalah.Board#public <init>(com.qualitascorpus.testsupport.IO) {}, play(com.qualitascorpus.testsupport.IO)>kalah.Board#public void play() {}, play(com.qualitascorpus.testsupport.IO)>kalah.Interface.IBoard#public abstract void play() <>]	2	[kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.Board#public void play() {}:[2], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.Interface.IBoard#public abstract void play() <>:[2]]	0	[]	0	[]	0	[]	0	[]	1	[kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}]	3	[Return:kalah.Kalah#public static void main(java.lang.String[]) {}, kalah.Kalah#public <init>() {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}]	0	[]
kalah.Singleton.Printer	Class	(not needed)	3	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.Interface.IHouse]	1	[kalah.Board]	4	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.Interface.IHouse, kalah.Board]	20	[kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Interface.ITeam#public abstract int getScore() <>:[6], Cast:kalah.Interface.ITeam:[5], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Interface.ITeam#public abstract int getTeamNumber() <>:[17], Local:kalah.Interface.ITeam:[1], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IStore#public abstract int getAmount() <>:[64], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IStore#public abstract int getNumber() <>:[15], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Interface.ITeam#public abstract int getTeamNumber() <>:[23], Local:kalah.Interface.IStore:[3], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IStore#public abstract int getNumber() <>:[60], Local:kalah.Interface.IStore:[1], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.ITeam#public abstract java.util.List getStores() <>:[7], Cast:kalah.Interface.IStore:[57], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IStore#public abstract int getAmount() <>:[19], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IHouse#public abstract int getAmount() <>:[31], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IHouse getHouse() <>:[30], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IHouse#public abstract int getAmount() <>:[48], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IHouse getHouse() <>:[47], Cast:kalah.Interface.ITeam:[46], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.ITeam#public abstract java.util.List getStores() <>:[42], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Interface.ITeam#public abstract int getTeamNumber() <>:[9]]	4	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.Interface.IHouse, kalah.Board]	3	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.Interface.IHouse]	12	[printResult(com.qualitascorpus.testsupport.IO,java.util.List)>kalah.Interface.ITeam#public abstract int getTeamNumber() <>, printState(com.qualitascorpus.testsupport.IO,java.util.List,int)>kalah.Team#public kalah.Interface.IHouse getHouse() {}, printState(com.qualitascorpus.testsupport.IO,java.util.List,int)>kalah.Interface.ITeam#public abstract kalah.Interface.IHouse getHouse() <>, printResult(com.qualitascorpus.testsupport.IO,java.util.List)>kalah.Team#public int getScore() {}, printResult(com.qualitascorpus.testsupport.IO,java.util.List)>kalah.Interface.ITeam#public abstract int getScore() <>, printState(com.qualitascorpus.testsupport.IO,java.util.List,int)>kalah.Interface.ITeam#public abstract java.util.List getStores() <>, printState(com.qualitascorpus.testsupport.IO,java.util.List,int)>kalah.Interface.IStore#public abstract int getAmount() <>, printState(com.qualitascorpus.testsupport.IO,java.util.List,int)>kalah.Team#public java.util.List getStores() {}, printState(com.qualitascorpus.testsupport.IO,java.util.List,int)>kalah.Store#public int getNumber() {}, printState(com.qualitascorpus.testsupport.IO,java.util.List,int)>kalah.Interface.IHouse#public abstract int getAmount() <>, printResult(com.qualitascorpus.testsupport.IO,java.util.List)>kalah.Team#public int getTeamNumber() {}, printState(com.qualitascorpus.testsupport.IO,java.util.List,int)>kalah.Interface.IStore#public abstract int getNumber() <>]	24	[kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Team#public java.util.List getStores() {}:[7], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Interface.ITeam#public abstract int getScore() <>:[6], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Interface.ITeam#public abstract int getTeamNumber() <>:[17], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IStore#public abstract int getAmount() <>:[64], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Team#public int getTeamNumber() {}:[17], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IStore#public abstract int getNumber() <>:[15], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Interface.ITeam#public abstract int getTeamNumber() <>:[23], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IStore#public abstract int getNumber() <>:[60], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Team#public int getTeamNumber() {}:[9], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Store#public int getNumber() {}:[15], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.ITeam#public abstract java.util.List getStores() <>:[7], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IStore#public abstract int getAmount() <>:[19], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IHouse#public abstract int getAmount() <>:[31], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IHouse getHouse() <>:[30], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Store#public int getNumber() {}:[60], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Team#public java.util.List getStores() {}:[42], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.IHouse#public abstract int getAmount() <>:[48], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IHouse getHouse() <>:[47], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Interface.ITeam#public abstract java.util.List getStores() <>:[42], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Team#public int getScore() {}:[6], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Team#public kalah.Interface.IHouse getHouse() {}:[30], kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}>kalah.Team#public kalah.Interface.IHouse getHouse() {}:[47], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Team#public int getTeamNumber() {}:[23], kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>kalah.Interface.ITeam#public abstract int getTeamNumber() <>:[9]]	6	[kalah.Singleton.Printer#public java.lang.String printNumber(int) {}>>>kalah.Singleton.Printer#public static kalah.Singleton.Printer getInstance() {}, kalah.Singleton.Printer#public java.lang.String printNumber(int) {}>>>kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}, kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>>>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}, kalah.Singleton.Printer#public static kalah.Singleton.Printer getInstance() {}>>>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}, kalah.Singleton.Printer#public static kalah.Singleton.Printer getInstance() {}>>>kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}, kalah.Singleton.Printer#public java.lang.String printNumber(int) {}>>>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}]	3	[kalah.Singleton.Printer#public java.lang.String printNumber(int) {}>>>kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}, kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}>>>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}, kalah.Singleton.Printer#public java.lang.String printNumber(int) {}>>>kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}]	5	[value2, value1, value4, value3, value0]	2	[value1, value0]	4	[kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}, kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}, kalah.Singleton.Printer#private final int PLAYER_1, kalah.Singleton.Printer#private final int PLAYER_2]	5	[Return:kalah.Singleton.Printer#public void printState(com.qualitascorpus.testsupport.IO,java.util.List,int) {}, Return:kalah.Singleton.Printer#public static kalah.Singleton.Printer getInstance() {}, Return:kalah.Singleton.Printer#public java.lang.String printNumber(int) {}, kalah.Singleton.Printer#public <init>() {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.Singleton.Printer#public void printResult(com.qualitascorpus.testsupport.IO,java.util.List) {}]	3	[kalah.Singleton.Printer#public static kalah.Singleton.Printer _instance, kalah.Singleton.Printer#private final int PLAYER_1, kalah.Singleton.Printer#private final int PLAYER_2]
kalah.Storage	Abstract	(not needed)	0	[]	2	[kalah.House, kalah.Store]	2	[kalah.House, kalah.Store]	0	[]	2	[kalah.House, kalah.Store]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	1	[kalah.Storage#public int getAmount() {}]	3	[Return:kalah.Storage#public int getAmount() {}, Return:kalah.Storage#public void addAmount(int) {}, kalah.Storage#public <init>() {}>java.lang.Object#public <init>() <>*:[1]]	1	[kalah.Storage#default int _amount]
kalah.Store	Class	(not needed)	2	[kalah.Interface.IStore, kalah.Storage]	1	[kalah.Team]	3	[kalah.Interface.IStore, kalah.Storage, kalah.Team]	6	[Implements:kalah.Store>kalah.Interface.IStore, Extends:kalah.Store>kalah.Storage, Put:kalah.Store#public <init>(int,int) {}>kalah.Storage#default int _amount:[3], kalah.Store#public int takeAll() {}>kalah.Storage#public int getAmount() {}:[1], Put:kalah.Store#public int takeAll() {}>kalah.Storage#default int _amount:[2], kalah.Store#public <init>(int,int) {}>kalah.Storage#public <init>() {}:[1]]	2	[kalah.Storage, kalah.Team]	1	[kalah.Storage]	1	[<init>(int,int)>kalah.Storage#public <init>() {}]	1	[kalah.Store#public int takeAll() {}>kalah.Storage#public int getAmount() {}:[1]]	1	[kalah.Store#public int getNumber() {}>>>kalah.Store#public int takeAll() {}]	1	[kalah.Store#public int getNumber() {}>>>kalah.Store#public int takeAll() {}]	1	[value0]	1	[value0]	2	[kalah.Store#public int getNumber() {}, kalah.Store#public int takeAll() {}]	3	[Return:kalah.Store#public int getNumber() {}, Return:kalah.Store#public int takeAll() {}, kalah.Store#public <init>(int,int) {}>kalah.Storage#public <init>() {}:[1]]	1	[kalah.Store#private int _number]
kalah.Team	Class	(not needed)	5	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.House, kalah.Store, kalah.Interface.IHouse]	1	[kalah.Board]	6	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.House, kalah.Store, kalah.Interface.IHouse, kalah.Board]	27	[kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Interface.IStore#public abstract int getNumber() <>:[6], kalah.Team#public <init>(int,int,int,int) {}>kalah.House#public <init>() {}:[4], kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Interface.ITeam#public abstract boolean move(int,int) <>:[14], Local:kalah.Interface.IStore:[0], Parameter:kalah.Team#public void addNext(kalah.Interface.ITeam) {}>kalah.Interface.ITeam:[0], kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Interface.IHouse#public abstract void addAmount(int) <>:[11], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract void addAmount(int) <>:[2], kalah.Team#public boolean move(int,int) {}>kalah.Interface.IHouse#public abstract void addAmount(int) <>:[10], Return:kalah.Team#public kalah.Interface.IHouse getHouse() {}, kalah.Team#private kalah.Interface.IHouse _house, kalah.Team#public boolean move(int,int) {}>kalah.Interface.ITeam#public abstract boolean move(int,int) <>:[13], Cast:kalah.Interface.IStore:[7], Cast:kalah.Interface.IStore:[5], Cast:kalah.Interface.IStore:[3], kalah.Team#public int getScore() {}>kalah.Interface.IStore#public abstract int getAmount() <>:[8], Return:kalah.Team#public kalah.Interface.IStore getStore(int) {}, kalah.Team#private kalah.Interface.ITeam _nextTeam, Parameter:kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore:[2], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract int getAmount() <>:[5], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IHouse#public abstract void addAmount(int) <>:[15], kalah.Team#public <init>(int,int,int,int) {}>kalah.Store#public <init>(int,int) {}:[8], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>:[11], Implements:kalah.Team>kalah.Interface.ITeam, kalah.Team#public int getScore() {}>kalah.Interface.IHouse#public abstract int getAmount() <>:[2], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract int getNumber() <>:[10], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract int takeAll() <>:[14], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract int takeAll() <>:[12]]	6	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.House, kalah.Store, kalah.Interface.IHouse, kalah.Board]	5	[kalah.Interface.IStore, kalah.Interface.ITeam, kalah.House, kalah.Store, kalah.Interface.IHouse]	18	[getScore()>kalah.Interface.IHouse#public abstract int getAmount() <>, moveAtMid(java.lang.Integer,int,int)>kalah.Interface.IHouse#public abstract void addAmount(int) <>, remainingSeeds(int,int,kalah.Interface.IStore)>kalah.Interface.IStore#public abstract int getNumber() <>, moveAtMid(java.lang.Integer,int,int)>kalah.Store#public int getNumber() {}, move(int,int)>kalah.Interface.IHouse#public abstract void addAmount(int) <>, remainingSeeds(int,int,kalah.Interface.IStore)>kalah.Store#public int takeAll() {}, remainingSeeds(int,int,kalah.Interface.IStore)>kalah.Interface.IStore#public abstract int getAmount() <>, getScore()>kalah.Interface.IStore#public abstract int getAmount() <>, <init>(int,int,int,int)>kalah.House#public <init>() {}, remainingSeeds(int,int,kalah.Interface.IStore)>kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>, remainingSeeds(int,int,kalah.Interface.IStore)>kalah.Interface.IStore#public abstract void addAmount(int) <>, moveAtMid(java.lang.Integer,int,int)>kalah.Interface.ITeam#public abstract boolean move(int,int) <>, remainingSeeds(int,int,kalah.Interface.IStore)>kalah.Interface.IStore#public abstract int takeAll() <>, remainingSeeds(int,int,kalah.Interface.IStore)>kalah.Store#public int getNumber() {}, move(int,int)>kalah.Interface.ITeam#public abstract boolean move(int,int) <>, moveAtMid(java.lang.Integer,int,int)>kalah.Interface.IStore#public abstract int getNumber() <>, <init>(int,int,int,int)>kalah.Store#public <init>(int,int) {}, remainingSeeds(int,int,kalah.Interface.IStore)>kalah.Interface.IHouse#public abstract void addAmount(int) <>]	27	[kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Interface.IStore#public abstract int getNumber() <>:[6], kalah.Team#public boolean move(int,int) {}>kalah.Interface.ITeam#public abstract boolean move(int,int) <>:[13][0]int, kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Interface.ITeam#public abstract boolean move(int,int) <>:[14], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract void addAmount(int) <>:[2][0]int, kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Interface.IHouse#public abstract void addAmount(int) <>:[11], kalah.Team#public boolean move(int,int) {}>kalah.Interface.IHouse#public abstract void addAmount(int) <>:[10][0]int, kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract void addAmount(int) <>:[2], kalah.Team#public boolean move(int,int) {}>kalah.Interface.IHouse#public abstract void addAmount(int) <>:[10], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>:[11][0]int, kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Store#public int takeAll() {}:[12], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Store#public int takeAll() {}:[14], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IHouse#public abstract void addAmount(int) <>:[15][0]int, kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Store#public int getNumber() {}:[10], kalah.Team#public boolean move(int,int) {}>kalah.Interface.ITeam#public abstract boolean move(int,int) <>:[13], kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Interface.ITeam#public abstract boolean move(int,int) <>:[14][1]int, kalah.Team#public boolean move(int,int) {}>kalah.Interface.ITeam#public abstract boolean move(int,int) <>:[13][1]int, kalah.Team#public int getScore() {}>kalah.Interface.IStore#public abstract int getAmount() <>:[8], kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Interface.ITeam#public abstract boolean move(int,int) <>:[14][0]int, kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Interface.IHouse#public abstract void addAmount(int) <>:[11][0]int, kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract int getAmount() <>:[5], kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>kalah.Store#public int getNumber() {}:[6], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IHouse#public abstract void addAmount(int) <>:[15], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.ITeam#public abstract kalah.Interface.IStore getStore(int) <>:[11], kalah.Team#public int getScore() {}>kalah.Interface.IHouse#public abstract int getAmount() <>:[2], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract int getNumber() <>:[10], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract int takeAll() <>:[14], kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}>kalah.Interface.IStore#public abstract int takeAll() <>:[12]]	12	[kalah.Team#public kalah.Interface.IHouse getHouse() {}>>>kalah.Team#public kalah.Interface.IStore getStore(int) {}, kalah.Team#public java.util.List getStores() {}>>>kalah.Team#public kalah.Interface.IHouse getHouse() {}, kalah.Team#public int getScore() {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public kalah.Interface.IStore getStore(int) {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public int getTeamNumber() {}>>>kalah.Team#public kalah.Interface.IStore getStore(int) {}, kalah.Team#public java.util.List getStores() {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>>>kalah.Team#public int getTeamNumber() {}, kalah.Team#public int getTeamNumber() {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public kalah.Interface.IHouse getHouse() {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public int getScore() {}>>>kalah.Team#public int getTeamNumber() {}, kalah.Team#public int getTeamNumber() {}>>>kalah.Team#public kalah.Interface.IHouse getHouse() {}, kalah.Team#public int getTeamNumber() {}>>>kalah.Team#public java.util.List getStores() {}]	12	[kalah.Team#public kalah.Interface.IHouse getHouse() {}>>>kalah.Team#public kalah.Interface.IStore getStore(int) {}, kalah.Team#public java.util.List getStores() {}>>>kalah.Team#public kalah.Interface.IHouse getHouse() {}, kalah.Team#public int getScore() {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public kalah.Interface.IStore getStore(int) {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public int getTeamNumber() {}>>>kalah.Team#public kalah.Interface.IStore getStore(int) {}, kalah.Team#public java.util.List getStores() {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}>>>kalah.Team#public int getTeamNumber() {}, kalah.Team#public int getTeamNumber() {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public kalah.Interface.IHouse getHouse() {}>>>kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#public int getScore() {}>>>kalah.Team#public int getTeamNumber() {}, kalah.Team#public int getTeamNumber() {}>>>kalah.Team#public kalah.Interface.IHouse getHouse() {}, kalah.Team#public int getTeamNumber() {}>>>kalah.Team#public java.util.List getStores() {}]	0	[]	0	[]	2	[kalah.Team#public void addNext(kalah.Interface.ITeam) {}, kalah.Team#private int _numTeams]	10	[Return:kalah.Team#public kalah.Interface.IStore getStore(int) {}, Return:kalah.Team#public boolean move(int,int) {}, Return:kalah.Team#public kalah.Interface.IHouse getHouse() {}, Return:kalah.Team#public boolean moveAtMid(java.lang.Integer,int,int) {}, Return:kalah.Team#private int remainingSeeds(int,int,kalah.Interface.IStore) {}, Return:kalah.Team#public java.util.List getStores() {}, Return:kalah.Team#public int getTeamNumber() {}, kalah.Team#public <init>(int,int,int,int) {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.Team#public void addNext(kalah.Interface.ITeam) {}, Return:kalah.Team#public int getScore() {}]	6	[kalah.Team#private int _addSead, kalah.Team#private kalah.Interface.ITeam _nextTeam, kalah.Team#private int _teamNum, kalah.Team#private int _numTeams, kalah.Team#private java.util.List _stores, kalah.Team#private kalah.Interface.IHouse _house]
